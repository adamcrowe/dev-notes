* OOP: 
** An object is a way of encapsulating state and behaviour. Objects communicate via messages.
** Strengths: Modelling real world objects; Re-usability; Easier to test
* Functional: 
** Functions take in data and output data; they neither store state nor mutate incoming data.
** Strengths: No concurrency; Brevity; Re-usability; Easier to test (don't need to set object state)
** Resources: 
*** Books: The Little Schemer; SICP
* Logic (Prolog):
** What not how. Facts and clauses. Rules specify relationships between facts (pattern matching).
** Strengths: Flexibility; Constraint-based calculations
** Resources:
*** Talks: Aja Hammerly 'A Taste of Prolog'
*** Books: The Art of Prolog (Sterling), Prolog Programming for the Working Programmer (Clocksin)
* Procedural (Assembly:
** Two registers: D is for data, A is for data or addresses.
** Strengths: None.
** Resources:
*** Courses: NAND to Tetris
*** Books: The Elements of Computer Systems: Building a Modern Computer from First Principles (Nisan)

* General Resources
** Books: Exercises in Programming Style (Lopes), Seven Languages in Seven Weeks

- [Aja Hammerly: 4 Programming Paradigms In 40 Minutes](https://www.youtube.com/watch?v=cgVVZMfLjEI)